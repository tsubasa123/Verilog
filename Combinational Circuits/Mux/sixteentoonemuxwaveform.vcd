$date
	Wed Apr 29 13:43:26 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module eighttoonemuxTB $end
$var wire 1 ! out $end
$var reg 8 " in [7:0] $end
$var reg 3 # sel [2:0] $end
$scope module DUT $end
$var wire 8 $ in [7:0] $end
$var wire 1 ! out $end
$var wire 4 % outofmux [3:0] $end
$var wire 2 & outofmux1 [1:0] $end
$var wire 3 ' sel [2:0] $end
$scope module mux1 $end
$var wire 1 ( in0 $end
$var wire 1 ) in1 $end
$var wire 1 * sel $end
$var reg 1 + Out $end
$upscope $end
$scope module mux2 $end
$var wire 1 , in0 $end
$var wire 1 - in1 $end
$var wire 1 . sel $end
$var reg 1 / Out $end
$upscope $end
$scope module mux3 $end
$var wire 1 0 in0 $end
$var wire 1 1 in1 $end
$var wire 1 2 sel $end
$var reg 1 3 Out $end
$upscope $end
$scope module mux4 $end
$var wire 1 4 in0 $end
$var wire 1 5 in1 $end
$var wire 1 6 sel $end
$var reg 1 7 Out $end
$upscope $end
$scope module mux5 $end
$var wire 1 8 in0 $end
$var wire 1 9 in1 $end
$var wire 1 : sel $end
$var reg 1 ; Out $end
$upscope $end
$scope module mux6 $end
$var wire 1 < in0 $end
$var wire 1 = in1 $end
$var wire 1 > sel $end
$var reg 1 ? Out $end
$upscope $end
$scope module mux7 $end
$var wire 1 @ in0 $end
$var wire 1 A in1 $end
$var wire 1 B sel $end
$var reg 1 C Out $end
$upscope $end
$upscope $end
$scope task initialize $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
0!
$end
#5
1)
11
1:
1>
b100010 "
b100010 $
b10 #
b10 '
#10
1C
1!
1@
1;
b1 &
18
19
1+
1/
b11 %
1(
0)
1,
01
b101 "
b101 $
#15
0@
1A
0;
1?
b10 &
08
09
1=
0+
0/
17
b1000 %
1C
1!
0(
0,
15
1*
1.
12
16
1B
b10000000 "
b10000000 $
b111 #
b111 '
#20
1@
1;
0C
0!
18
19
0A
1+
1/
b1011 %
0?
b1 &
1(
1)
1,
1-
11
14
0*
0.
02
06
0:
0>
b11101111 "
b11101111 $
b100 #
b100 '
#25
