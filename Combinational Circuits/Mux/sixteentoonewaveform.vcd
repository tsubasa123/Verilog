$date
	Wed Apr 29 13:04:21 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module sixteentoonemuxTB $end
$var wire 1 ! out $end
$var reg 16 " in [15:0] $end
$var reg 4 # sel [3:0] $end
$scope module DUT $end
$var wire 16 $ in [15:0] $end
$var wire 1 ! out $end
$var wire 8 % outofmux [7:0] $end
$var wire 4 & outofmux1 [3:0] $end
$var wire 2 ' outofmux2 [1:0] $end
$var wire 4 ( sel [3:0] $end
$scope module mux1 $end
$var wire 1 ) in0 $end
$var wire 1 * in1 $end
$var wire 1 + sel $end
$var reg 1 , Out $end
$upscope $end
$scope module mux2 $end
$var wire 1 - in0 $end
$var wire 1 . in1 $end
$var wire 1 / sel $end
$var reg 1 0 Out $end
$upscope $end
$scope module mux3 $end
$var wire 1 1 in0 $end
$var wire 1 2 in1 $end
$var wire 1 3 sel $end
$var reg 1 4 Out $end
$upscope $end
$scope module mux4 $end
$var wire 1 5 in0 $end
$var wire 1 6 in1 $end
$var wire 1 7 sel $end
$var reg 1 8 Out $end
$upscope $end
$scope module mux5 $end
$var wire 1 9 in0 $end
$var wire 1 : in1 $end
$var wire 1 ; sel $end
$var reg 1 < Out $end
$upscope $end
$scope module mux6 $end
$var wire 1 = in0 $end
$var wire 1 > in1 $end
$var wire 1 ? sel $end
$var reg 1 @ Out $end
$upscope $end
$scope module mux7 $end
$var wire 1 A in0 $end
$var wire 1 B in1 $end
$var wire 1 C sel $end
$var reg 1 D Out $end
$upscope $end
$scope module mux8 $end
$var wire 1 E in0 $end
$var wire 1 F in1 $end
$var wire 1 G sel $end
$var reg 1 H Out $end
$upscope $end
$scope module mux9 $end
$var wire 1 I in0 $end
$var wire 1 J in1 $end
$var wire 1 K sel $end
$var reg 1 L Out $end
$upscope $end
$scope module mux10 $end
$var wire 1 M in0 $end
$var wire 1 N in1 $end
$var wire 1 O sel $end
$var reg 1 P Out $end
$upscope $end
$scope module mux11 $end
$var wire 1 Q in0 $end
$var wire 1 R in1 $end
$var wire 1 S sel $end
$var reg 1 T Out $end
$upscope $end
$scope module mux12 $end
$var wire 1 U in0 $end
$var wire 1 V in1 $end
$var wire 1 W sel $end
$var reg 1 X Out $end
$upscope $end
$scope module mux13 $end
$var wire 1 Y in0 $end
$var wire 1 Z in1 $end
$var wire 1 [ sel $end
$var reg 1 \ Out $end
$upscope $end
$scope module mux14 $end
$var wire 1 ] in0 $end
$var wire 1 ^ in1 $end
$var wire 1 _ sel $end
$var reg 1 ` Out $end
$upscope $end
$scope module mux15 $end
$var wire 1 a in0 $end
$var wire 1 b in1 $end
$var wire 1 c sel $end
$var reg 1 d Out $end
$upscope $end
$upscope $end
$scope task initialize $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
0!
$end
#5
1d
1!
1a
1\
b1 '
1Z
1P
b10 &
1N
18
b1000 %
1+
1/
13
17
1;
1?
1C
1G
1K
1O
1S
1W
1[
1_
16
b111 #
b111 (
b10000000 "
b10000000 $
#10
0N
0Z
0a
08
b0 %
0P
b0 &
0\
b0 '
0d
0!
0+
0/
03
07
0;
0?
0C
0G
0K
0O
0S
0W
0[
0_
1c
b1000 #
b1000 (
#15
1d
1!
1b
1`
b10 '
1^
1X
b1000 &
1U
1D
b1000000 %
1+
1/
13
17
1;
1?
1C
1G
1[
1_
06
1B
b1101 #
b1101 (
b10000000000000 "
b10000000000000 $
#20
0d
0!
0b
0`
b0 '
0^
0X
b0 &
0U
0D
b0 %
0+
0/
03
07
0;
0?
0C
0G
b1100 #
b1100 (
#25
1d
1!
1a
1\
b1 '
1Y
1L
b1 &
1I
1,
b1 %
0[
0_
0c
1)
0B
1F
b0 #
b0 (
b1000000000000001 "
b1000000000000001 $
#30
1b
1`
1^
1X
0I
1V
0Y
0a
0,
1H
b10000000 %
0L
b1000 &
0\
b10 '
1d
1!
1+
1/
13
17
1;
1?
1C
1G
1K
1O
1S
1W
1[
1_
1c
b1111 #
b1111 (
#35
1a
1\
0b
1Z
0`
b1 '
1P
0^
1M
0V
0X
b10 &
1d
1!
14
0H
b100 %
0+
0/
03
07
0;
0?
0C
0G
0K
0O
0S
0W
0c
0)
11
0F
b100 #
b100 (
b10000 "
b10000 $
#40
0d
0!
0a
0\
b0 '
0Z
0P
b0 &
0M
04
b0 %
1+
1/
13
17
1;
1?
1C
1G
b101 #
b101 (
#45
